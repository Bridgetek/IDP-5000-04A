/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_Spinner
Header
*/

#ifndef Ft_Esd_Spinner__H
#define Ft_Esd_Spinner__H

#include "Esd_Base.h"
#include "Ft_Esd.h"
#include "Ft_Esd_Math.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_ARRAY_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_Spinner_CLASSID 0x8F3D87DB
ESD_SYMBOL(Ft_Esd_Spinner_CLASSID, Type = esd_classid_t)

/* Spinner Widget, to display a loading effect */
ESD_WIDGET(Ft_Esd_Spinner, Include = "Ft_Esd_Spinner.h", Callback, DisplayName = "ESD Spinner", Category = EsdWidgets, X = 0, Y = 0, Width = 400, Height = 300)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_VARIABLE(Started, Type = ft_bool_t, Private)
	ft_bool_t Started;
	ESD_VARIABLE(Style, Type = Esd_Spinner_Style, Default = ESD_SPINNER_CYCLE_DOT, Public)
	ft_uint8_t Style;
	ESD_VARIABLE(Scale, Type = Esd_Spinner_Scale, Default = ESD_SPINNER_SCALE_1X, Public)
	ft_uint8_t Scale;
} Ft_Esd_Spinner;

void Ft_Esd_Spinner__Initializer(Ft_Esd_Spinner *context);

ESD_SLOT(Render)
void Ft_Esd_Spinner_Render(Ft_Esd_Spinner *context);

ESD_SLOT(StopSpinner)
void Ft_Esd_Spinner_StopSpinner(Ft_Esd_Spinner *context);

ESD_SLOT(StartSpinner)
void Ft_Esd_Spinner_StartSpinner(Ft_Esd_Spinner *context);

#endif /* Ft_Esd_Spinner__H */

/* end of file */
