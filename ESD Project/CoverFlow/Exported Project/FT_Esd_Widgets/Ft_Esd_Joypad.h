/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_Joypad
Header
*/

#ifndef Ft_Esd_Joypad__H
#define Ft_Esd_Joypad__H

#include "Esd_Base.h"
#include "Esd_Core.h"
#include "Ft_Esd.h"
#include "Ft_Esd_BitmapInfo.h"
#include "Ft_Esd_Image.h"
#include "Ft_Esd_Math.h"
#include "Ft_Esd_RenderForwarder.h"
#include "Ft_Esd_TouchTag.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_ARRAY_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_Joypad_CLASSID 0x7CA27658
ESD_SYMBOL(Ft_Esd_Joypad_CLASSID, Type = esd_classid_t)

ESD_WIDGET(Ft_Esd_Joypad, Include = "Ft_Esd_Joypad.h", Callback, DisplayName = "ESD Joypad", Category = EsdWidgets, Icon = ":/icons/joystick.png", X = 0, Y = 0, Width = 200, Height = 200)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_VARIABLE(IsDown, Type = bool, Default = false, Private)
	bool IsDown;
	ESD_VARIABLE(LockXAxis, DisplayName = "Lock X Axis", Type = bool, Default = false, Public)
	bool LockXAxis;
	ESD_VARIABLE(LockYAxis, DisplayName = "Lock Y Axis", Type = bool, Default = false, Public)
	bool LockYAxis;
	ESD_VARIABLE(DefaultBackground, DisplayName = "DefaultBackground", Type = bool, Default = true, Public)
	bool DefaultBackground;
	ESD_VARIABLE(BackgroundImage, Type = Ft_Esd_BitmapCell, Public)
	Ft_Esd_BitmapCell BackgroundImage;
	ESD_INPUT(KnobRadius, DisplayName = "Knob Radius", Type = int, Default = 25)
	int(* KnobRadius)(void *context);
	ESD_INPUT(KnobColor, DisplayName = "Knob Color", Type = ft_argb32_t)
	ft_argb32_t(* KnobColor)(void *context);
	ESD_VARIABLE(AngleValue, DisplayName = "Angle", Type = int, Private)
	int AngleValue;
	ESD_VARIABLE(DistanceFrCenterValue, DisplayName = "Dist Fr Center", Type = int, Private)
	int DistanceFrCenterValue;
	ESD_VARIABLE(Variable, Type = int, Private)
	int Variable;
	ESD_VARIABLE(Variable_2, Type = int, Private)
	int Variable_2;
	ESD_VARIABLE(Variable_3, Type = int, Private)
	int Variable_3;
	ESD_VARIABLE(Variable_4, Type = int, Private)
	int Variable_4;
	ESD_VARIABLE(KnobX_Value, Type = int, Private)
	int KnobX_Value;
	ESD_VARIABLE(KnobY_Value, Type = int, Private)
	int KnobY_Value;
	Ft_Esd_TouchTag Touch_Tag;
	Ft_Esd_Image *ESD_Image;
	Ft_Esd_RenderForwarder Render_Forwarder;
} Ft_Esd_Joypad;

void Ft_Esd_Joypad__Initializer(Ft_Esd_Joypad *context);

ESD_SLOT(Start)
void Ft_Esd_Joypad_Start(Ft_Esd_Joypad *context);

ESD_SLOT(Update)
void Ft_Esd_Joypad_Update(Ft_Esd_Joypad *context);

ESD_SLOT(End)
void Ft_Esd_Joypad_End(Ft_Esd_Joypad *context);

ESD_OUTPUT(Angle, Type = int)
int Ft_Esd_Joypad_Angle(Ft_Esd_Joypad *context);

ESD_OUTPUT(DistFrCenter, Type = int)
int Ft_Esd_Joypad_DistFrCenter(Ft_Esd_Joypad *context);

ESD_OUTPUT(KnobX, Type = int)
int Ft_Esd_Joypad_KnobX(Ft_Esd_Joypad *context);

ESD_OUTPUT(KnobY, Type = int)
int Ft_Esd_Joypad_KnobY(Ft_Esd_Joypad *context);

#endif /* Ft_Esd_Joypad__H */

/* end of file */
