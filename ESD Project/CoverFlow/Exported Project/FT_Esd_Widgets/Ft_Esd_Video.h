/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_Video
Header
*/

#ifndef Ft_Esd_Video__H
#define Ft_Esd_Video__H

#include "Esd_Base.h"
#include "Esd_Core.h"
#include "Ft_Esd.h"
#include "Ft_Esd_BitmapInfo.h"
#include "Ft_Esd_Math.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_ARRAY_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_Video_CLASSID 0xCE1DE305
ESD_SYMBOL(Ft_Esd_Video_CLASSID, Type = esd_classid_t)

ESD_WIDGET(Ft_Esd_Video, Include = "Ft_Esd_Video.h", Callback, DisplayName = "ESD Video", Category = EsdWidgets, Icon = ":/icons/film-timeline.png", X = 0, Y = 0, Width = 400, Height = 300)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_INPUT(VideoFile, DisplayName = "Video File", Type = Ft_Esd_BitmapCell)
	Ft_Esd_BitmapCell(* VideoFile)(void *context);
	ESD_VARIABLE(Color, Type = ft_argb32_t, Default = #ffffff, Public)
	ft_argb32_t Color;
	ESD_VARIABLE(Align, Type = Esd_Align, Default = ESD_ALIGN_TOPLEFT, Public)
	uint8_t Align;
	ESD_VARIABLE(Scaling, Type = Esd_Scaling, Default = ESD_SCALING_STRETCH, Public)
	uint8_t Scaling;
	ESD_VARIABLE(AutoResize, Type = Esd_AutoResize, Default = ESD_AUTORESIZE_BOTH, Private)
	ft_uint8_t AutoResize;
	ESD_VARIABLE(ScaleX, Type = ft_int32_f16_t, Default = 1, Private)
	ft_int32_f16_t ScaleX;
	ESD_VARIABLE(ScaleY, Type = ft_int32_f16_t, Default = 1, Private)
	ft_int32_f16_t ScaleY;
	ESD_VARIABLE(Loop, Type = bool, Default = false, Public)
	bool Loop;
	ESD_VARIABLE(Sound, DisplayName = "Sound (Audio)", Type = bool, Private)
	bool Sound;
} Ft_Esd_Video;

void Ft_Esd_Video__Initializer(Ft_Esd_Video *context);

ESD_SLOT(Start)
void Ft_Esd_Video_Start(Ft_Esd_Video *context);

ESD_SLOT(Update)
void Ft_Esd_Video_Update(Ft_Esd_Video *context);

ESD_SLOT(Render)
void Ft_Esd_Video_Render(Ft_Esd_Video *context);

ESD_SLOT(Idle)
void Ft_Esd_Video_Idle(Ft_Esd_Video *context);

ESD_SLOT(End)
void Ft_Esd_Video_End(Ft_Esd_Video *context);

ESD_SLOT(Play)
void Ft_Esd_Video_Play(Ft_Esd_Video *context);

ESD_SLOT(Stop)
void Ft_Esd_Video_Stop(Ft_Esd_Video *context);

#endif /* Ft_Esd_Video__H */

/* end of file */
