/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_TextBox
Header
*/

#ifndef Ft_Esd_TextBox__H
#define Ft_Esd_TextBox__H

#include "EVE_Hal.h"
#include "Esd_Base.h"
#include "Esd_FontInfo.h"
#include "Ft_Esd.h"
#include "Ft_Esd_Math.h"
#include "Ft_Esd_Theme.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_ARRAY_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_TextBox_CLASSID 0x0F26A5C9
ESD_SYMBOL(Ft_Esd_TextBox_CLASSID, Type = esd_classid_t)

/* Multiple line Text Widget */
ESD_WIDGET(Ft_Esd_TextBox, Include = "Ft_Esd_TextBox.h", Callback, DisplayName = "ESD TextBox", Category = EsdWidgets, Icon = ":/icons/ui-labels.png", X = 248, Y = -141, Width = 400, Height = 300)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_INPUT(Font, Type = uint8_t, Min = 16, Max = 34, Default = 27)
	uint8_t(* Font)(void *context);
	ESD_INPUT(Theme, Type = Ft_Esd_Theme *, Default = Ft_Esd_Theme_GetCurrent)
	Ft_Esd_Theme *(* Theme)(void *context);
	ESD_INPUT(Text, Type = cstring, Default = "TextBox")
	cstring(* Text)(void *context);
	ESD_INPUT(FontResource, DisplayName = "Font Resource", Type = Esd_FontInfo *)
	Esd_FontInfo *(* FontResource)(void *context);
	ESD_VARIABLE(Radius, Type = int, Default = 0, Public)
	int Radius;
	ESD_VARIABLE(Raised, Type = ft_bool_t, Default = false, Public)
	ft_bool_t Raised;
	ESD_INPUT(AlignX, Type = Ft_AlignX_Opt, Min = 0, Max = 2, SingleStep = 1, Default = OPT_ALIGN_LEFT)
	ft_uint16_t(* AlignX)(void *context);
	ESD_VARIABLE(isCenterX, Type = bool, Private)
	bool isCenterX;
	ESD_INPUT(AlignY, Type = Ft_AlignY_Opt, Min = 0, Max = 2, SingleStep = 1, Default = OPT_ALIGN_TOP)
	ft_uint16_t(* AlignY)(void *context);
	ESD_VARIABLE(AdjustX, Type = int, Public)
	int AdjustX;
	ESD_VARIABLE(AdjustY, Type = int, Public)
	int AdjustY;
} Ft_Esd_TextBox;

void Ft_Esd_TextBox__Initializer(Ft_Esd_TextBox *context);

ESD_SLOT(Update)
void Ft_Esd_TextBox_Update(Ft_Esd_TextBox *context);

ESD_SLOT(Render)
void Ft_Esd_TextBox_Render(Ft_Esd_TextBox *context);

#endif /* Ft_Esd_TextBox__H */

/* end of file */
