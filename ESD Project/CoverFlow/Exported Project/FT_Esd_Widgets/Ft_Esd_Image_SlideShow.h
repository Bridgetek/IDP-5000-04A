/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_Image_SlideShow
Header
*/

#ifndef Ft_Esd_Image_SlideShow__H
#define Ft_Esd_Image_SlideShow__H

#include "Esd_Base.h"
#include "Esd_BitmapInfo.h"
#include "Esd_Core.h"
#include "Ft_Esd.h"
#include "Ft_Esd_BitmapInfo.h"
#include "Ft_Esd_Image.h"
#include "Ft_Esd_Layout_Fixed.h"
#include "Ft_Esd_Math.h"
#include "Ft_Esd_Rectangle.h"
#include "Ft_Esd_Timer.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_ARRAY_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_Image_SlideShow_CLASSID 0x3D5BC754
ESD_SYMBOL(Ft_Esd_Image_SlideShow_CLASSID, Type = esd_classid_t)

ESD_WIDGET(Ft_Esd_Image_SlideShow, Include = "Ft_Esd_Image_SlideShow.h", Callback, DisplayName = "ESD Image SlideShow", Category = EsdWidgets, Icon = ":/icons/image-medium.png", X = 0, Y = 0, Width = 400, Height = 300)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_VARIABLE(Color, Type = esd_argb32_t, Default = #ffffff, Private)
	esd_argb32_t Color;
	ESD_VARIABLE(AutoResize, Type = Esd_AutoResize, Default = ESD_AUTORESIZE_NONE, Public)
	ft_uint8_t AutoResize;
	ESD_VARIABLE(Scaling, Type = Esd_Scaling, Default = ESD_SCALING_STRETCH, Public)
	uint8_t Scaling;
	ESD_VARIABLE(Speed, Type = int, Min = 1, Max = 10, Default = 1, Public)
	int Speed;
	ESD_VARIABLE(Duration, Type = int, Min = 10, Max = 600, Default = 15, Public)
	int Duration;
	ESD_VARIABLE(Animation, Type = Esd_ImageAnimation, Default = IMAGE_RIGHT_TO_LEFT, Public)
	int Animation;
	ESD_VARIABLE(VariableTest, Type = int, Default = 0, Private)
	int VariableTest;
	ESD_VARIABLE(totalNum, Type = int, Default = 0, Private)
	int totalNum;
	ESD_ARRAY_INPUT(Array_Input, Type = Esd_BitmapCell, Array = true, Static = false)
	const Esd_BitmapCell* (* Array_Input)(void *context, size_t *size);
	int Array_Input_ArraySize;
	ESD_VARIABLE(Variable_2, Type = int, Private)
	int Variable_2;
	ESD_VARIABLE(BitmapVar, Type = Esd_BitmapCell, Private)
	Esd_BitmapCell BitmapVar;
	ESD_VARIABLE(Variable_3, Type = int, Private)
	int Variable_3;
	ESD_VARIABLE(Variable_8, Type = int, Private)
	int Variable_8;
	Esd_Rect16 Esd_Scissor_Set;
	ESD_VARIABLE(Bitmap, Type = Esd_BitmapCell, Private)
	Esd_BitmapCell Bitmap;
	ESD_VARIABLE(Variable_5, Type = Esd_BitmapCell, Private)
	Esd_BitmapCell Variable_5;
	ESD_VARIABLE(Variable_4, Type = Esd_BitmapCell, Private)
	Esd_BitmapCell Variable_4;
	ESD_VARIABLE(Variable_6, Type = bool, Default = false, Private)
	bool Variable_6;
	ESD_VARIABLE(Variable_11, Type = int, Default = 255, Private)
	int Variable_11;
	ESD_VARIABLE(Variable_12, Type = float, Private)
	float Variable_12;
	ESD_VARIABLE(Variable_14, Type = int, Private)
	int Variable_14;
	ESD_VARIABLE(Variable_13, Type = float, Private)
	float Variable_13;
	ESD_VARIABLE(Variable_7, Type = int, Private)
	int Variable_7;
	ESD_VARIABLE(Variable_9, Type = int, Private)
	int Variable_9;
	ESD_VARIABLE(Variable_10, Type = int, Private)
	int Variable_10;
	Ft_Esd_Timer ESD_Timer;
	Ft_Esd_Layout_Fixed Fixed_Positioning;
	Ft_Esd_Image ESD_Image_2;
	Ft_Esd_Image ESD_Image;
	Ft_Esd_Rectangle ESD_Rectangle_Widget;
} Ft_Esd_Image_SlideShow;

void Ft_Esd_Image_SlideShow__Initializer(Ft_Esd_Image_SlideShow *context);

ESD_SLOT(Render)
void Ft_Esd_Image_SlideShow_Render(Ft_Esd_Image_SlideShow *context);

ESD_SLOT(Idle)
void Ft_Esd_Image_SlideShow_Idle(Ft_Esd_Image_SlideShow *context);

ESD_SLOT(End)
void Ft_Esd_Image_SlideShow_End(Ft_Esd_Image_SlideShow *context);

ESD_SLOT(Start)
void Ft_Esd_Image_SlideShow_Start(Ft_Esd_Image_SlideShow *context);

ESD_SLOT(Update)
void Ft_Esd_Image_SlideShow_Update(Ft_Esd_Image_SlideShow *context);

#endif /* Ft_Esd_Image_SlideShow__H */

/* end of file */
