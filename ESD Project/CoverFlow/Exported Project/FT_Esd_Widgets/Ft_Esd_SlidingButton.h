/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_SlidingButton
Header
*/

#ifndef Ft_Esd_SlidingButton__H
#define Ft_Esd_SlidingButton__H

#include "Esd_Base.h"
#include "Esd_TouchTag.h"
#include "Ft_Esd.h"
#include "Ft_Esd_Math.h"
#include "Ft_Esd_RenderForwarder.h"
#include "Ft_Esd_Timer.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_ARRAY_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_SlidingButton_CLASSID 0x3333836E
ESD_SYMBOL(Ft_Esd_SlidingButton_CLASSID, Type = esd_classid_t)

ESD_WIDGET(Ft_Esd_SlidingButton, Include = "Ft_Esd_SlidingButton.h", Callback, DisplayName = "ESD Sliding Button", Category = EsdWidgets, X = 0, Y = 0, Width = 298, Height = 66)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_INPUT(Font, Type = uint8_t, Min = 16, Max = 34, Default = 29)
	uint8_t(* Font)(void *context);
	ESD_VARIABLE(Text, DisplayName = "Text", Type = const char *, Default = "Display Text", Public)
	const char * Text;
	ESD_INPUT(TextColor, DisplayName = "Text Color", Type = ft_rgb32_t, Default = #000000)
	ft_rgb32_t(* TextColor)(void *context);
	ESD_VARIABLE(TextPaddingX, DisplayName = "Text Padding X", Type = int, Default = 12, Public)
	int TextPaddingX;
	ESD_VARIABLE(TextPaddingY, DisplayName = "Text Padding Y", Type = int, Default = 18, Public)
	int TextPaddingY;
	ESD_SIGNAL(Activated)
	void(* Activated)(void *context);
	ESD_INPUT(BackgroundColor, DisplayName = "Background Color", Type = ft_argb32_t, Default = #ebecf0)
	ft_argb32_t(* BackgroundColor)(void *context);
	ESD_INPUT(KnobColor, DisplayName = "Knob Color", Type = ft_argb32_t, Default = #ffffff)
	ft_argb32_t(* KnobColor)(void *context);
	ESD_VARIABLE(Alpha, DisplayName = "Alpha", Type = int, Min = 0, Max = 255, SingleStep = 1, Private)
	int Alpha;
	ESD_VARIABLE(Direction, DisplayName = "Direction", Type = int, Default = 1, Private)
	int Direction;
	ESD_VARIABLE(TempHolder, DisplayName = "TempHolder", Type = int, Private)
	int TempHolder;
	ESD_VARIABLE(ControlActivated, DisplayName = "ControlActivated", Type = bool, Private)
	bool ControlActivated;
	ESD_VARIABLE(Knob_X, DisplayName = "Knob_X", Type = int, Private)
	int Knob_X;
	ESD_VARIABLE(Variable, Type = int, Private)
	int Variable;
	ESD_VARIABLE(IsDown, DisplayName = "IsDown", Type = ft_bool_t, Private)
	ft_bool_t IsDown;
	Esd_TouchTag TouchTag;
	Ft_Esd_Timer ESD_Timer;
	Ft_Esd_RenderForwarder Render_Forwarder;
} Ft_Esd_SlidingButton;

void Ft_Esd_SlidingButton__Initializer(Ft_Esd_SlidingButton *context);

ESD_SLOT(Start)
void Ft_Esd_SlidingButton_Start(Ft_Esd_SlidingButton *context);

ESD_SLOT(Update)
void Ft_Esd_SlidingButton_Update(Ft_Esd_SlidingButton *context);

ESD_SLOT(End)
void Ft_Esd_SlidingButton_End(Ft_Esd_SlidingButton *context);

ESD_SLOT(ResetKnobPosition)
void Ft_Esd_SlidingButton_ResetKnobPosition(Ft_Esd_SlidingButton *context);

#endif /* Ft_Esd_SlidingButton__H */

/* end of file */
