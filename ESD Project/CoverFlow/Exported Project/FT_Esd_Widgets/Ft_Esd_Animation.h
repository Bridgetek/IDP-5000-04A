/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_Animation
Header
*/

#ifndef Ft_Esd_Animation__H
#define Ft_Esd_Animation__H

#include "Esd_AnimationInfo.h"
#include "Esd_Base.h"
#include "Esd_Core.h"
#include "Ft_Esd.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_ARRAY_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_Animation_CLASSID 0x5634EF3A
ESD_SYMBOL(Ft_Esd_Animation_CLASSID, Type = esd_classid_t)

ESD_WIDGET(Ft_Esd_Animation, Include = "Ft_Esd_Animation.h", Callback, DisplayName = "ESD Animation", Category = EsdWidgets, Icon = ":/icons/film-timeline.png", X = 0, Y = 0, Width = 400, Height = 300)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_SIGNAL(RenderComplete)
	void(* RenderComplete)(void *context);
	ESD_VARIABLE(Color, Type = ft_argb32_t, Default = #ffffff, Public)
	ft_argb32_t Color;
	ESD_INPUT(AnimationInfo, DisplayName = "Animation Info", Type = Esd_AnimationInfo *)
	Esd_AnimationInfo *(* AnimationInfo)(void *context);
	ESD_VARIABLE(Align, Type = Esd_Align, Default = ESD_ALIGN_TOPLEFT, Public)
	uint8_t Align;
	ESD_VARIABLE(AutoResize, Type = Esd_AutoResize, Default = ESD_AUTORESIZE_BOTH, Public)
	ft_uint8_t AutoResize;
	ESD_VARIABLE(AutoPlay, Type = bool, Public)
	bool AutoPlay;
	ESD_VARIABLE(Loop, Type = Esd_AnimationLoop, Default = ANIM_LOOP, Public)
	int8_t Loop;
	ESD_VARIABLE(Frame, Type = int32_t, Default = 0, Public)
	int32_t Frame;
	ESD_VARIABLE(LastAddr, Type = uint32_t, Default = 3, Private)
	uint32_t LastAddr;
	ESD_VARIABLE(Playing, Type = bool, Default = false, Private)
	bool Playing;
	ESD_VARIABLE(IsSingle, Type = bool, Default = true, Private)
	bool IsSingle;
	ESD_VARIABLE(Counter, Type = int8_t, Private)
	int8_t Counter;
	ESD_VARIABLE(Channel, Type = int8_t, Default = -1, Private)
	int8_t Channel;
} Ft_Esd_Animation;

void Ft_Esd_Animation__Initializer(Ft_Esd_Animation *context);

ESD_SLOT(Render)
void Ft_Esd_Animation_Render(Ft_Esd_Animation *context);

ESD_OUTPUT(NumFrames, Type = int)
int Ft_Esd_Animation_NumFrames(Ft_Esd_Animation *context);

ESD_OUTPUT(Active, Type = bool)
bool Ft_Esd_Animation_Active(Ft_Esd_Animation *context);

ESD_SLOT(Play)
void Ft_Esd_Animation_Play(Ft_Esd_Animation *context);

ESD_SLOT(Stop)
void Ft_Esd_Animation_Stop(Ft_Esd_Animation *context);

ESD_SLOT(Single)
void Ft_Esd_Animation_Single(Ft_Esd_Animation *context);

ESD_SLOT(Enable)
void Ft_Esd_Animation_Enable(Ft_Esd_Animation *context);

ESD_SLOT(End)
void Ft_Esd_Animation_End(Ft_Esd_Animation *context);

#endif /* Ft_Esd_Animation__H */

/* end of file */
