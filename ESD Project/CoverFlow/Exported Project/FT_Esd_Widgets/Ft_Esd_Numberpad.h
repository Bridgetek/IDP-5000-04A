/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_Numberpad
Header
*/

#ifndef Ft_Esd_Numberpad__H
#define Ft_Esd_Numberpad__H

#include "Esd_Base.h"
#include "Esd_FontInfo.h"
#include "Ft_Esd.h"
#include "Ft_Esd_Layout_Fixed.h"
#include "Ft_Esd_Math.h"
#include "Ft_Esd_RenderForwarder.h"
#include "Ft_Esd_TouchTag.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_ARRAY_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_Numberpad_CLASSID 0xDEE3ABE0
ESD_SYMBOL(Ft_Esd_Numberpad_CLASSID, Type = esd_classid_t)

ESD_WIDGET(Ft_Esd_Numberpad, Include = "Ft_Esd_Numberpad.h", Callback, DisplayName = "ESD Number Pad", Category = EsdWidgets, Icon = ":/icons/sort-number.png", X = 0, Y = 0, Width = 210, Height = 280)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_SIGNAL(KeyReleased)
	void(* KeyReleased)(void *context);
	ESD_VARIABLE(isDown, DisplayName = "isDown", Type = bool, Default = false, Private)
	bool isDown;
	ESD_VARIABLE(XValue, DisplayName = "XValue", Type = int, Private)
	int XValue;
	ESD_VARIABLE(YValue, DisplayName = "YValue", Type = int, Private)
	int YValue;
	ESD_VARIABLE(Radius, DisplayName = "Radius", Type = int, Private)
	int Radius;
	ESD_VARIABLE(Alpha, DisplayName = "Alpha", Type = int, Min = 0, Max = 255, SingleStep = 1, Private)
	int Alpha;
	ESD_VARIABLE(Variable, Type = bool, Private)
	bool Variable;
	ESD_VARIABLE(PointerIndex, DisplayName = "PointerIndex", Type = int, Default = 0, Private)
	int PointerIndex;
	int Ft_Esd_Detect_KeyDepressed;
	ESD_VARIABLE(Container, DisplayName = "Container", Type = void *, Private)
	void * Container;
	bool Ft_Esd_CheckEmitPressedSignal;
	ESD_VARIABLE(lastSentValue, DisplayName = "lastSentValue", Type = int, Default = -1, Private)
	int lastSentValue;
	ESD_VARIABLE(hasSent, DisplayName = "hasSent", Type = bool, Default = false, Private)
	bool hasSent;
	ESD_SIGNAL(Keypressed)
	void(* Keypressed)(void *context);
	ESD_VARIABLE(TouchPattern, DisplayName = "TouchPattern", Type = bool, Public)
	bool TouchPattern;
	ESD_VARIABLE(baseLine, Type = uint16_t, Private)
	uint16_t baseLine;
	ESD_VARIABLE(capsHeight, Type = uint16_t, Private)
	uint16_t capsHeight;
	ESD_INPUT(Font, Type = uint8_t, Min = 16, Max = 34, Default = 27)
	uint8_t(* Font)(void *context);
	ESD_VARIABLE(xOffset, Type = uint16_t, Private)
	uint16_t xOffset;
	ESD_INPUT(FontResource, DisplayName = "Font Resource", Type = Esd_FontInfo *)
	Esd_FontInfo *(* FontResource)(void *context);
	ESD_VARIABLE(myFont, Type = uint16_t, Private)
	uint16_t myFont;
	Ft_Esd_TouchTag TouchTag;
	Ft_Esd_RenderForwarder Render_Forwarder;
	Ft_Esd_Layout_Fixed Fixed_Positioning;
} Ft_Esd_Numberpad;

void Ft_Esd_Numberpad__Initializer(Ft_Esd_Numberpad *context);

ESD_SLOT(Start)
void Ft_Esd_Numberpad_Start(Ft_Esd_Numberpad *context);

ESD_SLOT(Update)
void Ft_Esd_Numberpad_Update(Ft_Esd_Numberpad *context);

ESD_OUTPUT(InputKey, Type = int)
int Ft_Esd_Numberpad_InputKey(Ft_Esd_Numberpad *context);

ESD_SLOT(End)
void Ft_Esd_Numberpad_End(Ft_Esd_Numberpad *context);

#endif /* Ft_Esd_Numberpad__H */

/* end of file */
