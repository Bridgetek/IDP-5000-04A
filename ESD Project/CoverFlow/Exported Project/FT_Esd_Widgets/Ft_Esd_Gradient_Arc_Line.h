/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_Gradient_Arc_Line
Header
*/

#ifndef Ft_Esd_Gradient_Arc_Line__H
#define Ft_Esd_Gradient_Arc_Line__H

#include "Esd_Base.h"
#include "Ft_Esd.h"
#include "Ft_Esd_RenderForwarder.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_ARRAY_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_Gradient_Arc_Line_CLASSID 0xC5C7C0C4
ESD_SYMBOL(Ft_Esd_Gradient_Arc_Line_CLASSID, Type = esd_classid_t)

ESD_WIDGET(Ft_Esd_Gradient_Arc_Line, Include = "Ft_Esd_Gradient_Arc_Line.h", Callback, DisplayName = "ESD Gradient ArcLine", Category = EsdBasicWidgets, Icon = ":/icons/layer-gradient-curve.png", X = 0, Y = 0, Width = 400, Height = 300)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_VARIABLE(G_X, Type = int, Private)
	int G_X;
	ESD_VARIABLE(G_Y, Type = int, Private)
	int G_Y;
	ESD_VARIABLE(G_W, Type = int, Private)
	int G_W;
	ESD_VARIABLE(G_H, Type = int, Private)
	int G_H;
	ESD_VARIABLE(Border, Type = int, Default = 20, Public)
	int Border;
	ESD_VARIABLE(Start_Color, Type = esd_argb32_t, Default = #00ff00, Public)
	esd_argb32_t Start_Color;
	ESD_VARIABLE(End_Color, Type = esd_argb32_t, Default = #aa0000, Public)
	esd_argb32_t End_Color;
	ESD_VARIABLE(Origin, Type = int, Min = 0, Max = 360, Public)
	int Origin;
	ESD_VARIABLE(Angle, Type = int, Min = 0, Max = 360, Default = 90, Public)
	int Angle;
	ESD_VARIABLE(IsClockwise, Type = bool, Default = true, Public)
	bool IsClockwise;
	ESD_VARIABLE(ShowEndPoint, Type = bool, Default = true, Public)
	bool ShowEndPoint;
	ESD_VARIABLE(ShowStartPoint, Type = bool, Default = true, Public)
	bool ShowStartPoint;
	Ft_Esd_RenderForwarder Render_Forwarder;
} Ft_Esd_Gradient_Arc_Line;

void Ft_Esd_Gradient_Arc_Line__Initializer(Ft_Esd_Gradient_Arc_Line *context);

ESD_SLOT(Update)
void Ft_Esd_Gradient_Arc_Line_Update(Ft_Esd_Gradient_Arc_Line *context);

ESD_SLOT(End)
void Ft_Esd_Gradient_Arc_Line_End(Ft_Esd_Gradient_Arc_Line *context);

#endif /* Ft_Esd_Gradient_Arc_Line__H */

/* end of file */
